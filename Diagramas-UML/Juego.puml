@startuml
' Clases relacionadas
class Menu
class BovedaCristales
class FusionadorEnergon
class Personaje


' Clase Utilidades

' Clase principal: Juego
class Juego {
  +Juego()
  +void procesar_menu_principal(const char &opcion_menu, const std::string &nombre)
  +bool jugando() const

  -Personaje personaje
  -Menu menu
  -Utilidades utilidades
  -BovedaCristales boveda
  -FusionadorEnergon fusionador
  -bool juego_en_curso
  -std::string nombre_jugador

  -void respuesta_personaje(const std::string &mensaje)
  -void manejar_sugerencia_personaje()
  -void manejar_opcion_escribir_mensaje()
  -void fusionador_de_cristales(const int &entrada_1, const int &entrada_2)
  -void manejar_fusionar_de_cristales()
  -void manejar_de_almacenamiento_de_cristales()
  -void manejar_mostrar_boveda()
  -void manejar_exportar_boveda(std::string &ruta)
  -void manejar_de_bodega_mostrar_tamanio()
  -void manejar_de_bodega()
  -void interactuar_con_personaje()
  -bool verificar_entrada_del_cristal(const int &entrada)
}

' Clase BovedaCristales
class BovedaCristales {
  +BovedaCristales()
  +BovedaCristales(size_t tamanio_inicial)
  +void almacenar_cristal(Cristal cristal_nuevo)
  +void mostrar_cristales()
  +Cristal obtener_cristal(size_t posicion)
  +void exportar_cristales(std::string ruta)
  +bool esta_vacia()
  +size_t tamanio()
  +Cristal obtener_y_eliminar_cristal_mas_poderoso()
  +Cristal obtener_cristal_mas_poderoso()

  -Vector<Cristal> cristales
  -size_t tamanio_inicial
  -Menu menu

  -std::string construir_ruta_completa(std::string& ruta)
  -void crear_directorios(const std::string& ruta)
  -void escribir_cristales_en_archivo(std::ofstream& archivo)
}


' Clase Menu
class Menu {
  +void mostrar_menu_principal(const std::string &nombre)
  +void mostrar_menu_personaje(const int &personaje_elejido)
  +void mostrar_menu_ingresar_mensaje()
  +void mostrar_menu_estado(const int &personaje_elejido)
  +void mostrar_recuadro_superior()
  +void mostrar_recuadro_inferior()
  +void limpiar_menu()
  +void mostrar_mensaje(const std::string &mensaje)
  +void mostrar_menu_fusionar_cristales()
  +void mostrar_menu_boveda()
  +void mostrar_menu_almacenar_cristal()
  +void mostrar_menu_exportar_archivo()
  +void mostrar_ingresar_cristal(const int &cristal)
  +void mostrar_estadisticas(const std::string &fuerza, const std::string &defensa, const std::string &velocidad)
  +void mostrar_rareza(const std::string &rareza)
  +void mostrar_menu_inicial()
}

' Clase FusionadorEnergon
class FusionadorEnergon {
  +FusionadorEnergon()
  +Cristal fusionar(Cristal cristal_1, Cristal cristal_2)
  +Cristal fusionar(Cristal cristal_1, Cristal cristal_2, GeneradorAleatorio& generador)
  +Cristal fusionar_cristales(Cristal cristal_1, Cristal cristal_2, GeneradorAleatorio *generador)
  +void verificar_rarezas_iguales(Cristal &cristal_1, Cristal &cristal_2)
  +bool verificar_exito_de_fusion(const Rareza &rareza_actual, const int &porcentaje_exito, GeneradorAleatorio *generador)
  +void verificar_fusion_prohibida(const Rareza &rareza)
  +int obtener_proxima_rareza(const Rareza &rareza)
  +int obtener_rareza_anterior(const Rareza &rareza)
  +void resetear_fallos_por_nivel(const Rareza &rareza)
  +bool dar_bonificacion(const int &probabilidad_bonificacion)

  -int fallos_consecutivos[4]
  -int ultima_rareza
  -int probabilidad_bonificacion
  -GeneradorAleatorio generador_bonificacion
}

' Clase Personaje
class Personaje {
  +Personaje(Protagonista personaje)
  +void obtener_respuesta(const std::string &mensaje)
  +void obtener_sugerencia()
  +void actualizar_estado(const char &indice)
  +Protagonista obtener_personaje()
  +void equipar_cristal(Cristal cristal)

  -OptimusPrime optimus
  -Megatron megatron
  -Protagonista personaje_jugando
  -char indice_estado
  -std::string estado_personaje
  -BovedaCristales cristales_equipados
  -void obtener_estados()
}


' Relaciones de composiciÃ³n
Juego --> Menu
Juego --> BovedaCristales
Juego --> FusionadorEnergon
Juego --> Personaje








@enduml
