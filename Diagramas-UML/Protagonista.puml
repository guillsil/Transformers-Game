@startuml
' Clases relacionadas
class Megatron
class OptimusPrime
class BovedaCristales
class Protagonista
class Transformers

class Transformers {
    - const int ESTADISTICAS_AUMENTO = 10
    - const int ESTADISTICAS_REDUCCION = -10
    - const int CAMBIO_NORMAL = 2
    - const int CAMBIO_MUCHO = 3
    - const int CAMBIO_TOTALMENTE = 4
    - std::string nombre
    - std::string faccion
    - std::string vehiculo
    - int fuerza
    - int defensa
    - int velocidad
    - bool transformado = false

    - void cambiar_estadisticas(int& estadistica_cambio, int numero_cambio)
    - std::string chequear_transformado()
    - void chequeo_vehiculo(bool al_reves)
    - std::string obtener_faccion()
    + Transformers(std::string nombre, int fuerza, int defensa, int velocidad, std::string faccion, std::string vehiculo, bool transformado)
    + Transformers(std::string nombre, int fuerza, int defensa, int velocidad, std::string faccion, std::string vehiculo)
    + std::string obtener_nombre()
    + void cambiar_forma()
    + bool operator==(const Transformers& otro_transformer)
    + bool son_iguales_fuerza(Transformers& transformer1, Transformers& transformer2)
    + bool es_mas_fuerte(Transformers& transformer1, Transformers& transformer2)
    + friend std::ostream& operator<<(std::ostream& os, const Transformers& transformer)
}
' Clase Personaje
class Protagonista {
  +Personaje(Personaje personaje)
  +void obtener_respuesta(const std::string &mensaje)
  +void obtener_sugerencia()
  +void actualizar_estado(const char &indice)
  +Personaje obtener_personaje()
  +void equipar_cristal(Cristal cristal)

  -OptimusPrime optimus
  -Megatron megatron
  -Personaje personaje_jugando
  -Transformers transformer
  -char indice_estado
  -std::string estado_personaje
  -BovedaCristales cristales_equipados
  -void obtener_estados()
}


' Clase OptimusPrime
class OptimusPrime {
  +OptimusPrime()
  +void responder(std::string mensaje)
  +void sugerir_fusion()
  +void cambiar_animo(std::string animo)

  -Utilidades utilidades
  -int estado_de_animo
}

' Clase BovedaCristales
class BovedaCristales {
  +BovedaCristales()
  +BovedaCristales(size_t tamanio_inicial)
  +void almacenar_cristal(Cristal cristal_nuevo)
  +void mostrar_cristales()
  +Cristal obtener_cristal(size_t posicion)
  +void exportar_cristales(std::string ruta)
  +bool esta_vacia()
  +size_t tamanio()
  +Cristal obtener_y_eliminar_cristal_mas_poderoso()
  +Cristal obtener_cristal_mas_poderoso()

  -Vector<Cristal> cristales
  -size_t tamanio_inicial
  -Menu menu

  -std::string construir_ruta_completa(std::string& ruta)
  -void crear_directorios(const std::string& ruta)
  -void escribir_cristales_en_archivo(std::ofstream& archivo)
}

' Clase Megatron
class Megatron {
  +Megatron()
  +void responder(std::string mensaje)
  +void sugerir_fusion()
  +void cambiar_intencion(std::string intencion)

  -Utilidades utilidades
  -int estado_de_intencion
}


Protagonista *-- OptimusPrime
Protagonista *-- Megatron
Protagonista *-- BovedaCristales
Protagonista *-- Transformers


@enduml
