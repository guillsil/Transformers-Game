@startuml
' Clases relacionadas
class FusionadorEnergon
class GeneradorAleatorio

' Clase FusionadorEnergon
class FusionadorEnergon {
  +FusionadorEnergon()
  +Cristal fusionar(Cristal cristal_1, Cristal cristal_2)
  +Cristal fusionar(Cristal cristal_1, Cristal cristal_2, GeneradorAleatorio& generador)
  +Cristal fusionar_cristales(Cristal cristal_1, Cristal cristal_2, GeneradorAleatorio *generador)
  +void verificar_rarezas_iguales(Cristal &cristal_1, Cristal &cristal_2)
  +bool verificar_exito_de_fusion(const Rareza &rareza_actual, const int &porcentaje_exito, GeneradorAleatorio *generador)
  +void verificar_fusion_prohibida(const Rareza &rareza)
  +int obtener_proxima_rareza(const Rareza &rareza)
  +int obtener_rareza_anterior(const Rareza &rareza)
  +void resetear_fallos_por_nivel(const Rareza &rareza)
  +bool dar_bonificacion(const int &probabilidad_bonificacion)

  -int fallos_consecutivos[4]
  -int ultima_rareza
  -int probabilidad_bonificacion
  -GeneradorAleatorio generador_bonificacion
}

' Clase GeneradorAleatorio
class GeneradorAleatorio {
  +GeneradorAleatorio()
  +bool generar_chance_porcentual(size_t porcentaje)
  +~GeneradorAleatorio() : default

  -std::default_random_engine generador
  -std::uniform_int_distribution<> distribucion
}

FusionadorEnergon --> GeneradorAleatorio

@enduml
