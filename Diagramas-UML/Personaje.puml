@startuml
' Clases relacionadas
class Megatron
class OptimusPrime
class BovedaCristales
class Personaje


' enum Protagonista
enum Protagonista {
    MEGATRON,
    OPTIMUS_PRIME,
    PERSONAJE_INVALIDO
}

' Clase Personaje
class Personaje {
  +Personaje(Protagonista personaje)
  +void obtener_respuesta(const std::string &mensaje)
  +void obtener_sugerencia()
  +void actualizar_estado(const char &indice)
  +Protagonista obtener_personaje()
  +void equipar_cristal(Cristal cristal)

  -OptimusPrime optimus
  -Megatron megatron
  -Protagonista personaje_jugando
  -char indice_estado
  -std::string estado_personaje
  -BovedaCristales cristales_equipados
  -void obtener_estados()
}


' Clase OptimusPrime
class OptimusPrime {
  +OptimusPrime()
  +void responder(std::string mensaje)
  +void sugerir_fusion()
  +void cambiar_animo(std::string animo)

  -Utilidades utilidades
  -int estado_de_animo
}

' Clase BovedaCristales
class BovedaCristales {
  +BovedaCristales()
  +BovedaCristales(size_t tamanio_inicial)
  +void almacenar_cristal(Cristal cristal_nuevo)
  +void mostrar_cristales()
  +Cristal obtener_cristal(size_t posicion)
  +void exportar_cristales(std::string ruta)
  +bool esta_vacia()
  +size_t tamanio()
  +Cristal obtener_y_eliminar_cristal_mas_poderoso()
  +Cristal obtener_cristal_mas_poderoso()

  -Vector<Cristal> cristales
  -size_t tamanio_inicial
  -Menu menu

  -std::string construir_ruta_completa(std::string& ruta)
  -void crear_directorios(const std::string& ruta)
  -void escribir_cristales_en_archivo(std::ofstream& archivo)
}

' Clase Megatron
class Megatron {
  +Megatron()
  +void responder(std::string mensaje)
  +void sugerir_fusion()
  +void cambiar_intencion(std::string intencion)

  -Utilidades utilidades
  -int estado_de_intencion
}


Personaje *-- OptimusPrime
Personaje *-- Megatron
Personaje *-- BovedaCristales
Personaje *-- Protagonista


@enduml
